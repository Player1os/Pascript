<module>
  <function>
    int findset(int v, int[] roots)
    {
      if (roots[v] != v)
      {
        roots[v] = findset(roots[v], roots);
      }
      return roots[v];
    }

    void union(int u, int v, int[] roots)
    {
      roots[v] = findset(u, roots);
    }
  </function>
  <main>
    int n;
    -> n;
    int m;
    -> m;

    int[] roots;
    roots.resize[n];

    for (int i = 0; i < n; i++)
    {
      roots[i] = i;
    }

    for (int i = 0; i < m; i++)
    {
      int u;
      -> u;
      int v;
      -> v;
      
      int fs_u = findset(u, roots);
      int fs_v = findset(v, roots);
      
      if (fs_u != fs_v)
      {
        union(fs_u, fs_v, roots);
      }
    }

    if (n > 0)
    {
      int first_root = roots[0];
      for (int i = 1; i < n; i++)
      {
        if (first_root != root)
        {
          <- "NIE";
          return 0;
        }
      }
    }

    <- "ANO";
    return 0;
  </main>
</module>